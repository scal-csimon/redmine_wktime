 Assets: 
  chart_type: line
  code_str: "dateArr = []; 12.times {|m| dateArr << [@to.beginning_of_month, @to.end_of_month]; @to = @to - 1.month}; fields = [] ;12.times {|m| fields << month_name(((@to.month - 1 - m) % 12) + 1).first(3)};@assestTotValues = []; dateArr.reverse.each {|c| totalValue = WkAssetDepreciation.find_by_sql(%Q{
    select sum(CASE WHEN dp.id IS NULL THEN 
      CASE WHEN ap.current_value IS NULL THEN (ii.cost_price + ii.over_head_price) ELSE ap.current_value END
    ELSE 
      (dp.actual_amount-dp.depreciation_amount)
    END) AS actual_value
    from wk_inventory_items ii
    INNER JOIN wk_product_items pt ON (pt.id = ii.product_item_id AND ii.product_type = 'A')
    LEFT OUTER JOIN (
      select max(depreciation_date) as depreciation_date, inventory_item_id from wk_asset_depreciations d
      where d.depreciation_date <= '#{c.last.to_date}' group by inventory_item_id
    ) md on (md.inventory_item_id = ii.id)
    LEFT OUTER JOIN wk_asset_depreciations dp on (md.inventory_item_id = dp.inventory_item_id and  md.depreciation_date = dp.depreciation_date)
    LEFT OUTER JOIN wk_shipments s ON s.id = ii.shipment_id
    LEFT OUTER JOIN wk_asset_properties ap ON (ap.inventory_item_id = ii.id)
    LEFT OUTER JOIN wk_products p ON (p.id = pt.product_id)
    LEFT OUTER JOIN projects ON (projects.id = ii.project_id)
    WHERE ap.id is not null and (ap.is_disposed != #{booleanFormat(true)} OR ap.is_disposed is NUll) and s.shipment_date <= '#{c.last.to_date}'}); @assestTotValues << totalValue.first.actual_value.to_i}; { 'fields' => fields.reverse };"
  x_title: "label_months"
  y_title: "label_amount"
  names_of_data:
   - data: "@assestTotValues"
     title: "label_total_assets_per_month" 